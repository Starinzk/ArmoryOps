// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    role          UserRole  @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Batch {
  id String @id @default(cuid())
  name String
  quantity Int
  status BatchStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serializedItems SerializedItem[]

  productId String // Foreign key for Product
  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

enum BatchStatus {
  PENDING
  IN_PROGRESS
  COMPLETE
}

model SerializedItem {
  id           String         @id @default(uuid())
  serialNumber String         @unique
  batch        Batch          @relation(fields: [batchId], references: [id])
  batchId      String
  status       ItemStatus     @default(NOT_STARTED)
  currentStage String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum ItemStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
}

model Product {
  id          String   @id @default(cuid())
  name        String
  modelNumber String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  batches Batch[] // A product can be part of many batches
}

enum UserRole {
  ADMIN
  PRODUCTION
  INVENTORY
  QC
  USER
}
